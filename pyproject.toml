# pyproject.toml

# Build system configuration (PEP 518)
[build-system]
requires = ["setuptools==80.8.0"] # Specify minimum setuptools version needed
build-backend = "setuptools.build_meta" # The backend used to build the package (standard for setuptools)

# Project metadata (PEP 621)
[project]
name = "usdt-monitor-bot" # Replace with your desired project name (use hyphens)
version = "0.1.0" # Initial version
description = "Telegram bot to monitor specified Ethereum addresses for incoming USDT transactions using Etherscan API."
readme = "README.md" # Assuming you have or will create a README file
authors = [
    { name = "Your Name", email = "your.email@example.com" }, # Replace with your details
]
license = { text = "MIT" } # Or specify file = "LICENSE" if you have a LICENSE file
requires-python = ">=3.9" # Based on usage of asyncio.to_thread
classifiers = [ # Standard classifiers for PyPI (optional but good practice)
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["telegram", "bot", "aiogram", "ethereum", "etherscan", "usdt", "crypto", "monitoring"]

# Project dependencies (runtime)
# NOTE: Keep this in sync with requirements.txt if using both,
# especially for Docker builds relying on requirements.txt.
dependencies = [
    "aiogram==3.20.0.post0",      # Core bot framework
    "aiohttp==3.12.6",      # For async HTTP requests (Etherscan)
    "apscheduler==3.11.0",  # For scheduled tasks (monitoring job)
    "python-dotenv==1.1.0", # Optional: For loading .env file locally (good practice)
    "tenacity==9.1.2"      # For retry mechanisms
]

# Optional dependencies (for development, testing, etc.)
[project.optional-dependencies]
test = [
    "pytest==8.3.5",
    "pytest-asyncio==1.0.0",
    "pytest-mock==3.14.1",
]
dev = [
    "usdt-monitor-bot[test]", # Include test dependencies in dev
    "ruff==0.11.12",           # Linter (optional)
    # Add other development tools here
]

# Project URLs (optional)
[project.urls]
Homepage = "https://github.com/your_username/usdt-monitor-bot" # Replace with your repo URL
Repository = "https://github.com/your_username/usdt-monitor-bot"
# Bug-Tracker = "https://github.com/your_username/usdt-monitor-bot/issues"

# --- Tool Configurations ---

# Pytest configuration (replaces pytest.ini)
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [ # Directory where tests are located
    "tests",
]
python_files = "test_*.py" # Pattern for test files
# Add options you would normally use on the command line
# -v: verbose, -ra: show extra test summary info for all except passes
addopts = "-v -ra --strict-markers"
asyncio_mode = "auto" # Enable asyncio support via pytest-asyncio
# Explicitly set the default loop scope for async fixtures
asyncio_default_fixture_loop_scope = "function"

# Ruff linter configuration (optional, example)
# [tool.ruff]
# line-length = 88
# select = ["E", "W", "F", "I", "UP"] # Select error codes (E/W=pycodestyle, F=pyflakes, I=isort, UP=pyupgrade)
# ignore = []
# exclude = [".venv", "venv", ".git", "__pycache__"]

# Black code formatter configuration (optional, example)
# [tool.black]
# line-length = 88
# target-version = ['py39', 'py310', 'py311'] # Specify target Python versions

[tool.pyright]
typeCheckingMode = "off"

[tool.setuptools.packages.find]
where = ["."]  # look in the current directory
include = ["usdt_monitor_bot*"]  # include only the usdt_monitor_bot package and its submodules
exclude = ["data*"] # explicitly exclude the data directory
namespaces = false # project does not use namespace packages
